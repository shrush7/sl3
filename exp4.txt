import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv(r"C:\Users\HP\Desktop\DS lab assignment\GroupA-Assignment4\HousingData.csv")
data.head()

data.tail()

print("The shape of the data is: ")
data.shape

data.isnull().sum()

updated_data = data
updated_data ['CRIM'] = updated_data['CRIM'].fillna(updated_data['CRIM'].mean())
updated_data ['ZN'] = updated_data['ZN'].fillna(updated_data['ZN'].mean())
updated_data ['INDUS'] = updated_data['INDUS'].fillna(updated_data['INDUS'].mean())
updated_data ['CHAS'] = updated_data['CHAS'].fillna(updated_data['CHAS'].mean())
updated_data ['AGE'] = updated_data['AGE'].fillna(updated_data['AGE'].mean())
updated_data ['LSTAT'] = updated_data['LSTAT'].fillna(updated_data['LSTAT'].mean())
updated_data.info()

data.isnull().sum()

X = data.iloc[:,0:13]
y = data.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
model = make_pipeline(StandardScaler(with_mean=False), LinearRegression())
model.fit(X_train, y_train)

model.score(X_test,y_test)

#data = pd.read_csv(r"C:\Users\HP\Desktop\DS lab assignment\GroupA-Assignment4\HousingData.csv")
data.head(10)

# Make predictions
predictions = model.predict(X_test)
# Print the predictions
print(predictions)

#import pandas as pd
# Convert predictions, X_test, and y_test to DataFrames
predictions_data = pd.DataFrame(predictions, columns=['Predicted Price'])
#X_test_df = pd.DataFrame(X_test, columns=['Feature 1', 'Feature 2', ...])  # Replace 'Feature 1', 'Feature 2', ... with your actual feature names
y_test_data = pd.DataFrame(y_test, columns=['MEDV'])

# Concatenate the DataFrames
result_data = pd.concat([predictions_data, y_test_data], axis=1)
# Print the result DataFrame
print(result_data)

